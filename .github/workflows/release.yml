name: Build and Release

on:
  push:
    tags:
      - 'v*'  # 当推送以 'v' 开头的标签时触发，如 v1.0.0, v2.1.3
jobs:
  build:
    name: Build for multiple platforms
    runs-on: ${{ matrix.goos == 'darwin' && 'macOS-latest' || 'ubuntu-latest' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - goos: windows
            goarch: amd64
            suffix: .exe
            name: windows-amd64
          - goos: linux
            goarch: amd64
            suffix: ""
            name: linux-amd64
          - goos: darwin
            goarch: amd64
            suffix: ""
            name: macos-amd64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.1'

    - name: Install dependencies
      run: |
        go mod download
        go mod verify

    # 新增：安装Python和fonttools用于字体子集化
    - name: Set up Python for font subsetting
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install fonttools for font subsetting
      run: |
        pip install fonttools
        echo "✅ 已安装字体子集化工具"

    # 新增：安装UPX压缩工具
    - name: Install UPX
      run: |
        sudo apt-get update
        sudo apt-get install -y upx-ucl
        upx --version
        echo "✅ 已安装UPX压缩工具"

    # 安装平台特定的构建依赖
    - name: Install build dependencies for Linux
      if: matrix.goos == 'linux'
      run: |
        export DEBIAN_FRONTEND=noninteractive
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends gcc-multilib libc6-dev
        sudo apt-get install -y --no-install-recommends libgl1-mesa-dev xorg-dev
        echo "✅ 已安装Linux构建依赖"
        ldconfig -p | grep -E 'libGL|libX11' || echo "⚠️ 警告: 部分库可能未正确安装"

    # 增强Windows构建支持
    - name: Install cross-compilation tools for Windows
      if: matrix.goos == 'windows'
      run: |
        export DEBIAN_FRONTEND=noninteractive
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends gcc-mingw-w64

    # 增强macOS构建支持
    - name: Setup macOS cross-compilation (if needed)
      if: matrix.goos == 'darwin'
      run: |
        echo "ℹ️ 设置macOS交叉编译环境..."
        go env

    # 修改：从zh.json国际化文件中提取中文字符
    - name: Extract Chinese characters from i18n files
      run: |
        echo "📝 从国际化文件中提取中文字符..."

        cat > extract_chinese.py << 'EOF'
        import json
        import os
        import sys

        def is_chinese(c):
            return '\u4e00' <= c <= '\u9fff'

        def extract_chinese_from_json(filename):
            chinese_chars = set()
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    data = json.load(f)

                def extract_from_value(value):
                    if isinstance(value, str):
                        for c in value:
                            if is_chinese(c):
                                chinese_chars.update(value)
                                break
                    elif isinstance(value, dict):
                        for v in value.values():
                            extract_from_value(v)
                    elif isinstance(value, list):
                        for item in value:
                            extract_from_value(item)

                extract_from_value(data)

            except Exception as e:
                print(f"警告: 处理文件 {filename} 时出错: {e}", file=sys.stderr)

            return chinese_chars

        def main():
            all_chinese = set()

            zh_json_path = 'i18n/zh.json'
            if os.path.exists(zh_json_path):
                chinese_chars = extract_chinese_from_json(zh_json_path)
                all_chinese.update(chinese_chars)
                print(f"✅ 从 {zh_json_path} 提取了中文字符")
            else:
                print(f"❌ 错误: 找不到中文国际化文件: {zh_json_path}")
                sys.exit(1)

            ascii_chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 ,.?!@#$%^&*()_+-=[]{}|;:\"'<>/`~"
            all_chars = all_chinese.union(set(ascii_chars))

            with open('chinese_chars.txt', 'w', encoding='utf-8') as f:
                f.write(''.join(all_chars))

            print(f"📊 统计信息:")
            print(f"- 总字符数: {len(all_chars)}")
            print(f"- 中文字符数: {len([c for c in all_chars if is_chinese(c)])}")
            print(f"- ASCII字符数: {len(ascii_chars)}")

            chinese_sample = ''.join([c for c in all_chars if is_chinese(c)][:10])
            print(f"- 中文字符样例: {chinese_sample}")

        if __name__ == '__main__':
            main()
        EOF

        # 执行Python脚本
        python extract_chinese.py

        echo "📄 中文字符文件内容预览:"
        head -c 100 chinese_chars.txt

    # 加强字体子集化步骤的错误处理
    - name: Create font subset
      run: |
        echo "📝 开始字体子集化..."
        
        if [ ! -f "gui/NotoSansSC-Regular.ttf" ]; then
          echo "❌ 错误: 字体文件不存在: gui/NotoSansSC-Regular.ttf"
          echo "目录内容:"
          ls -la gui/
          exit 1
        fi
        
        if [ ! -f "chinese_chars.txt" ]; then
          echo "❌ 错误: 中文字符文件不存在: chinese_chars.txt"
          exit 1
        fi
        
        if ! pyftsubset gui/NotoSansSC-Regular.ttf --text-file=chinese_chars.txt --output-file=gui/NotoSansSC-Subset.ttf; then
          echo "❌ 字体子集化失败，尝试使用基本选项..."
          pyftsubset gui/NotoSansSC-Regular.ttf --text="测试中文" --output-file=gui/NotoSansSC-Subset.ttf
        fi
        
        if [ ! -f "gui/NotoSansSC-Subset.ttf" ]; then
          echo "❌ 错误: 子集字体文件创建失败"
          cp gui/NotoSansSC-Regular.ttf gui/NotoSansSC-Subset.ttf
          echo "⚠️ 使用原始字体作为备用方案"
        else
          # 检查字体文件大小
          ORIGINAL_SIZE=$(stat -c %s gui/NotoSansSC-Regular.ttf)
          SUBSET_SIZE=$(stat -c %s gui/NotoSansSC-Subset.ttf)
          SAVED_SIZE=$((ORIGINAL_SIZE - SUBSET_SIZE))
          SAVED_PERCENT=$((SAVED_SIZE * 100 / ORIGINAL_SIZE))
          
          echo "📊 字体文件大小对比:"
          echo "- 原始字体: $ORIGINAL_SIZE 字节"
          echo "- 子集字体: $SUBSET_SIZE 字节"
          echo "- 节省空间: $SAVED_SIZE 字节 ($SAVED_PERCENT%)"
        fi
        
        if [ -f "gui/resources.go" ]; then
          sed -i 's/NotoSansSC-Regular.ttf/NotoSansSC-Subset.ttf/g' gui/resources.go
          echo "✅ 更新resources.go使用子集字体"
        else
          echo "❌ 错误: resources.go文件不存在"
        fi

    # 增强构建步骤，添加更多错误处理和调试信息
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: ${{ matrix.goos == 'darwin' && '0' || '1' }}
      run: |
        echo "🔨 开始为 ${{ matrix.goos }}-${{ matrix.goarch }} 构建二进制文件..."
        
        # 设置交叉编译环境
        if [ "${{ matrix.goos }}" = "windows" ]; then
          export CC=x86_64-w64-mingw32-gcc
          export CXX=x86_64-w64-mingw32-g++
        elif [ "${{ matrix.goos }}" = "darwin" ]; then
          echo "ℹ️ macOS构建已禁用CGO以解决交叉编译问题"
                  elif [ "${{ matrix.goos }}" = "linux" ]; then
            echo "ℹ️ 配置Linux构建环境"
        fi
        
        # 显示编译环境信息
        echo "📋 编译环境信息:"
        echo "- GOOS: $GOOS"
        echo "- GOARCH: $GOARCH"
        echo "- CGO_ENABLED: $CGO_ENABLED"
        echo "- CC: ${CC:-未设置}"
        echo "- CXX: ${CXX:-未设置}"
        
        OUTPUT_NAME="Cursor_Windsurf_Reset-${{ matrix.name }}${{ matrix.suffix }}"
        
        BUILD_TAGS=""
        if [ "${{ matrix.goos }}" = "darwin" ]; then
          BUILD_TAGS="-tags=nomobile,nogl"
          echo "ℹ️ 为macOS构建添加特殊标签: $BUILD_TAGS"
          export FYNE_RENDER="software"
        fi
        
        
        
        LDFLAGS="-s -w -X main.version=${{ github.ref_name }}"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          LDFLAGS="$LDFLAGS -H windowsgui"
        fi
        
        echo "🔧 执行构建命令: go build $BUILD_TAGS -ldflags=\"$LDFLAGS\" -o \"${OUTPUT_NAME}\" main.go"
        
        if ! go build $BUILD_TAGS -ldflags="$LDFLAGS" -o "${OUTPUT_NAME}" main.go; then
          echo "❌ 构建失败，显示详细日志"
                      go build -v -x $BUILD_TAGS -ldflags="$LDFLAGS" -o "${OUTPUT_NAME}" main.go || true
          echo "📋 诊断信息:"
          go env
          echo "⚠️ 构建失败，但继续处理其他步骤"
          
          echo "0,0,0,0" > "${OUTPUT_NAME}.metrics"
          echo "构建失败: ${{ matrix.goos }}-${{ matrix.goarch }}" > "${OUTPUT_NAME}.error"
        fi
        
        ORIGINAL_SIZE=$(stat -c %s "${OUTPUT_NAME}")
        echo "📊 原始二进制文件大小: ${ORIGINAL_SIZE} 字节"
        
        if [ -f "${OUTPUT_NAME}" ]; then
          echo "✅ 构建成功: ${OUTPUT_NAME}"
          ls -la "${OUTPUT_NAME}"
        else
          echo "❌ 构建失败: ${OUTPUT_NAME} 文件不存在"
          exit 1
        fi
        
        echo "📦 开始UPX压缩..."
        if ! upx --best "${OUTPUT_NAME}"; then
          echo "⚠️ UPX压缩失败，尝试使用普通模式"
          upx "${OUTPUT_NAME}" || echo "❌ UPX压缩完全失败，使用未压缩文件"
        fi
        
        COMPRESSED_SIZE=$(stat -c %s "${OUTPUT_NAME}")
        SAVED_SIZE=$((ORIGINAL_SIZE - COMPRESSED_SIZE))
        SAVED_PERCENT=$((SAVED_SIZE * 100 / ORIGINAL_SIZE))
        
        echo "📊 压缩效果:"
        echo "- 压缩前: ${ORIGINAL_SIZE} 字节"
        echo "- 压缩后: ${COMPRESSED_SIZE} 字节"
        echo "- 节省空间: ${SAVED_SIZE} 字节 (${SAVED_PERCENT}%)"
        
        echo "${ORIGINAL_SIZE},${COMPRESSED_SIZE},${SAVED_SIZE},${SAVED_PERCENT}" > "${OUTPUT_NAME}.metrics"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Cursor_Windsurf_Reset-${{ matrix.name }}
        path: |
          Cursor_Windsurf_Reset-${{ matrix.name }}${{ matrix.suffix }}
          Cursor_Windsurf_Reset-${{ matrix.name }}${{ matrix.suffix }}.metrics
          Cursor_Windsurf_Reset-${{ matrix.name }}${{ matrix.suffix }}.error
        if-no-files-found: warn  # 即使找不到文件也只发出警告而不失败

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Display structure of downloaded files
      run: |
        echo "📁 下载的文件结构:"
        find . -name "Cursor_Windsurf_Reset-*" -type f | sort
        
        # 列出下载的目录结构
        echo "📁 完整目录结构:"
        find . -type f | sort

    - name: Prepare release files
      run: |
        mkdir -p release-files
        

        find . -name "Cursor_Windsurf_Reset-*" | grep -v "\.metrics$\|\.error$" | while read file; do
          if [ -f "$file" ]; then
            # 为Linux文件添加执行权限
            if [[ "$file" == *"linux"* ]]; then
              chmod +x "$file"
              echo "✅ 添加执行权限: $file"
            fi
            cp "$file" release-files/
            echo "✅ 复制文件: $file -> release-files/"
          fi
        done
        

        ERROR_FILES=$(find . -name "*.error" 2>/dev/null || echo "")
        if [ -n "$ERROR_FILES" ]; then
          echo "⚠️ 检测到以下平台构建失败："
          cat $ERROR_FILES
          echo "## ⚠️ 部分平台构建失败" > build_status.md
          echo "" >> build_status.md
          echo "以下平台的构建未成功完成：" >> build_status.md
          echo "" >> build_status.md
          for error_file in $ERROR_FILES; do
            echo "- $(cat $error_file)" >> build_status.md
          done
          echo "" >> build_status.md
          echo "请下载其他可用平台的版本。" >> build_status.md
        else
          echo "✅ 所有平台构建成功"
          echo "## ✅ 所有平台构建成功" > build_status.md
        fi
        
        # 复制配置文件和文档（修正文件名）
        if [ -f "reset_config.json" ]; then
          cp reset_config.json release-files/
          echo "✅ 复制文件: reset_config.json -> release-files/"
        else
          echo "⚠️ 警告: reset_config.json 不存在"
        fi
        
        if [ -f "README.md" ]; then
          cp README.md release-files/
          echo "✅ 复制文件: README.md -> release-files/"
        else
          echo "⚠️ 警告: README.md 不存在"
        fi
        
        echo "📦 准备发布的文件:"
        ls -la release-files/

    # 新增：收集所有平台的优化指标
    - name: Collect optimization metrics
      id: collect_metrics
      run: |
        echo "📊 收集优化指标..."
        TOTAL_ORIGINAL_SIZE=0
        TOTAL_COMPRESSED_SIZE=0
        
        echo "| 平台 | 原始大小 | 优化后大小 | 节省空间 | 压缩率 |" > optimization_metrics.md
        echo "|------|----------|------------|----------|--------|" >> optimization_metrics.md
        
        # 查找所有指标文件
        METRICS_FILES=$(find . -name "*.metrics" 2>/dev/null || echo "")
        
        if [ -z "$METRICS_FILES" ]; then
          echo "⚠️ 警告: 未找到指标文件，无法生成优化报告"
          echo "| 无数据 | - | - | - | - |" >> optimization_metrics.md
        else
          while read metrics_file; do
            PLATFORM=$(basename $metrics_file .metrics)
            
            if [ ! -f "$metrics_file" ]; then
              echo "⚠️ 警告: 指标文件不存在: $metrics_file"
              continue
            fi
            
            METRICS=$(cat $metrics_file)
            
            # 处理可能的格式错误
            if [[ $METRICS != *","* ]]; then
              echo "⚠️ 警告: 指标文件格式错误: $metrics_file"
              continue
            fi
            
            IFS=',' read -r ORIGINAL_SIZE COMPRESSED_SIZE SAVED_SIZE SAVED_PERCENT <<< "$METRICS"
            
            if [[ ! "$ORIGINAL_SIZE" =~ ^[0-9]+$ ]]; then
              echo "⚠️ 警告: 无法解析原始大小: $ORIGINAL_SIZE"
              continue
            fi
            
            ORIGINAL_SIZE_MB=$(echo "scale=2; $ORIGINAL_SIZE/1048576" | bc)
            COMPRESSED_SIZE_MB=$(echo "scale=2; $COMPRESSED_SIZE/1048576" | bc)
            SAVED_SIZE_MB=$(echo "scale=2; $SAVED_SIZE/1048576" | bc)
            
            echo "| $PLATFORM | ${ORIGINAL_SIZE_MB} MB | ${COMPRESSED_SIZE_MB} MB | ${SAVED_SIZE_MB} MB | ${SAVED_PERCENT}% |" >> optimization_metrics.md
            
            TOTAL_ORIGINAL_SIZE=$((TOTAL_ORIGINAL_SIZE + ORIGINAL_SIZE))
            TOTAL_COMPRESSED_SIZE=$((TOTAL_COMPRESSED_SIZE + COMPRESSED_SIZE))
          done <<< "$METRICS_FILES"
          
          if [ $TOTAL_ORIGINAL_SIZE -gt 0 ]; then
            TOTAL_SAVED_SIZE=$((TOTAL_ORIGINAL_SIZE - TOTAL_COMPRESSED_SIZE))
            TOTAL_SAVED_PERCENT=$((TOTAL_SAVED_SIZE * 100 / TOTAL_ORIGINAL_SIZE))
            TOTAL_ORIGINAL_SIZE_MB=$(echo "scale=2; $TOTAL_ORIGINAL_SIZE/1048576" | bc)
            TOTAL_COMPRESSED_SIZE_MB=$(echo "scale=2; $TOTAL_COMPRESSED_SIZE/1048576" | bc)
            TOTAL_SAVED_SIZE_MB=$(echo "scale=2; $TOTAL_SAVED_SIZE/1048576" | bc)
            
            echo "| **总计** | **${TOTAL_ORIGINAL_SIZE_MB} MB** | **${TOTAL_COMPRESSED_SIZE_MB} MB** | **${TOTAL_SAVED_SIZE_MB} MB** | **${TOTAL_SAVED_PERCENT}%** |" >> optimization_metrics.md
          fi
        fi
        
        echo "✅ 优化指标收集完成"
        cat optimization_metrics.md

    - name: Generate bilingual release notes
      id: release_notes
      run: |
        TAG_NAME=${{ github.ref_name }}

        echo "🎉 Cursor & Windsurf Data Reset Tool ${TAG_NAME}" > release_notes.md
        echo "" >> release_notes.md

        if [ -f "build_status.md" ]; then
          cat build_status.md >> release_notes.md
          echo "" >> release_notes.md
        fi

        echo "## 📦 Download Instructions" >> release_notes.md
        echo "" >> release_notes.md
        echo "Please download the version corresponding to your operating system:" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Windows Users" >> release_notes.md
        echo "- **Windows**: \`Cursor_Windsurf_Reset-windows-amd64.exe\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Linux Users" >> release_notes.md
        echo "- **Linux**: \`Cursor_Windsurf_Reset-linux-amd64\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "## 🚀 Usage" >> release_notes.md
        echo "" >> release_notes.md
        echo "1. Download the executable file for your platform" >> release_notes.md
        echo "2. Download the \`reset_config.json\` configuration file (optional)" >> release_notes.md
        echo "3. Double-click to run (Windows) or execute in terminal" >> release_notes.md
        echo "4. For detailed usage instructions, please refer to \`README.md\`" >> release_notes.md
        echo "" >> release_notes.md

  
        echo "---" >> release_notes.md
        echo "" >> release_notes.md

        # 中文版本
        echo "## 中文说明 / Chinese Instructions" >> release_notes.md
        echo "" >> release_notes.md
        echo "🎉 **Cursor & Windsurf 重置工具 ${TAG_NAME}**" >> release_notes.md
        echo "" >> release_notes.md
        echo "### 📦 下载说明" >> release_notes.md
        echo "" >> release_notes.md
        echo "请根据您的操作系统下载对应的版本：" >> release_notes.md
        echo "" >> release_notes.md
        echo "#### Windows 用户" >> release_notes.md
        echo "- **Windows**: \`Cursor_Windsurf_Reset-windows-amd64.exe\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "#### Linux 用户" >> release_notes.md
        echo "- **Linux**: \`Cursor_Windsurf_Reset-linux-amd64\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "### 🚀 使用方法" >> release_notes.md
        echo "" >> release_notes.md
        echo "1. 下载对应平台的可执行文件" >> release_notes.md
        echo "2. 下载 \`reset_config.json\` 配置文件（可选）" >> release_notes.md
        echo "3. 双击运行（Windows）或在终端中执行" >> release_notes.md
        echo "4. 详细使用说明请参考 \`README.md\`" >> release_notes.md
        echo "" >> release_notes.md

        echo "📝 生成的双语发布说明:"
        cat release_notes.md

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: "Cursor & Windsurf Data Reset Tool ${{ github.ref_name }}"
        body_path: release_notes.md
        draft: false
        prerelease: false
        files: |
          release-files/*
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload release summary
      run: |
        echo "🎉 发布完成！" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📦 发布信息" >> $GITHUB_STEP_SUMMARY
        echo "- **标签**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **发布时间**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔗 链接" >> $GITHUB_STEP_SUMMARY