name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Trigger when pushing tags starting with 'v', like v1.0.0, v2.1.3

jobs:
  build:
    name: Build for multiple platforms
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: windows
            goarch: amd64
            suffix: .exe
            name: windows-amd64
            cgo: 1
          - goos: windows
            goarch: arm64
            suffix: .exe
            name: windows-arm64
            cgo: 1
          - goos: darwin
            goarch: amd64
            suffix: ""
            name: macos-amd64
            cgo: 0
          - goos: darwin
            goarch: arm64
            suffix: ""
            name: macos-arm64
            cgo: 0
          - goos: linux
            goarch: amd64
            suffix: ""
            name: linux-amd64
            cgo: 1
          - goos: linux
            goarch: arm64
            suffix: ""
            name: linux-arm64
            cgo: 0

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install dependencies
      run: |
        go mod download
        go mod verify

    - name: Install build dependencies for Linux
      if: matrix.goos == 'linux' && matrix.cgo == 1
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-multilib libc6-dev
        # Install Fyne dependencies
        sudo apt-get install -y libgl1-mesa-dev xorg-dev

    - name: Install cross-compilation tools for Windows
      if: matrix.goos == 'windows'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-mingw-w64

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: ${{ matrix.cgo }}
      run: |
        # Set cross-compilation environment
        if [ "${{ matrix.goos }}" = "windows" ]; then
          if [ "${{ matrix.goarch }}" = "amd64" ]; then
            export CC=x86_64-w64-mingw32-gcc
            export CXX=x86_64-w64-mingw32-g++
          else
            export CC=aarch64-w64-mingw32-gcc
            export CXX=aarch64-w64-mingw32-g++
          fi
        fi
        
        # Build binary with GUI subsystem for Windows
        OUTPUT_NAME="Cursor_Windsurf_Reset-${{ matrix.name }}${{ matrix.suffix }}"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          # Build as Windows GUI application (not console)
          go build -ldflags="-s -w -H windowsgui -X main.version=${{ github.ref_name }}" -o "${OUTPUT_NAME}" main.go
        else
          go build -ldflags="-s -w -X main.version=${{ github.ref_name }}" -o "${OUTPUT_NAME}" main.go
        fi
        
        # Verify file creation
        if [ -f "${OUTPUT_NAME}" ]; then
          echo "Build successful: ${OUTPUT_NAME}"
          ls -la "${OUTPUT_NAME}"
        else
          echo "Build failed: ${OUTPUT_NAME}"
          exit 1
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Cursor_Windsurf_Reset-${{ matrix.name }}
        path: Cursor_Windsurf_Reset-${{ matrix.name }}${{ matrix.suffix }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Display structure of downloaded files
      run: |
        echo "Downloaded file structure:"
        find . -name "Cursor_Windsurf_Reset-*" -type f | sort

    - name: Prepare release files
      run: |
        mkdir -p release-files
        
        # Move all built binary files to release-files directory
        find . -name "Cursor_Windsurf_Reset-*" -type f -executable -o -name "*.exe" | while read file; do
          if [ -f "$file" ]; then
            cp "$file" release-files/
            echo "Copied file: $file -> release-files/"
          fi
        done
        
        # Copy configuration files and documentation
        cp reset_config.json release-files/
        cp README.md release-files/
        
        echo "Files prepared for release:"
        ls -la release-files/

    - name: Generate release notes
      id: release_notes
      run: |
        TAG_NAME=${{ github.ref_name }}
        echo "🎉 Cursor & Windsurf Reset Tool ${TAG_NAME}" > release_notes.md
        echo "" >> release_notes.md
        echo "## 📦 Download Instructions" >> release_notes.md
        echo "" >> release_notes.md
        echo "Please download the appropriate version for your operating system:" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Windows Users" >> release_notes.md
        echo "- **Windows x64**: \`Cursor_Windsurf_Reset-windows-amd64.exe\`" >> release_notes.md
        echo "- **Windows ARM64**: \`Cursor_Windsurf_Reset-windows-arm64.exe\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "### macOS Users" >> release_notes.md
        echo "- **Intel Mac**: \`Cursor_Windsurf_Reset-macos-amd64\`" >> release_notes.md
        echo "- **Apple Silicon (M1/M2)**: \`Cursor_Windsurf_Reset-macos-arm64\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Linux Users" >> release_notes.md
        echo "- **Linux x64**: \`Cursor_Windsurf_Reset-linux-amd64\`" >> release_notes.md
        echo "- **Linux ARM64**: \`Cursor_Windsurf_Reset-linux-arm64\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "## 🚀 Usage" >> release_notes.md
        echo "" >> release_notes.md
        echo "1. Download the executable file for your platform" >> release_notes.md
        echo "2. Download \`reset_config.json\` configuration file (optional)" >> release_notes.md
        echo "3. Double-click to run (Windows) or execute in terminal" >> release_notes.md
        echo "4. For detailed instructions, see \`README.md\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "## ⚠️ Important Notes" >> release_notes.md
        echo "" >> release_notes.md
        echo "- Backup important data before use" >> release_notes.md
        echo "- Ensure Cursor and Windsurf applications are completely closed" >> release_notes.md
        echo "- First run may require administrator privileges" >> release_notes.md
        echo "- macOS and Linux users may need to add execute permissions: \`chmod +x Cursor_Windsurf_Reset-*\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "## 🔧 Technical Information" >> release_notes.md
        echo "" >> release_notes.md
        echo "- **Version**: ${TAG_NAME}" >> release_notes.md
        echo "- **Build Time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> release_notes.md
        echo "- **Go Version**: 1.21" >> release_notes.md
        echo "- **GUI Framework**: Fyne v2" >> release_notes.md
        
        echo "Generated release notes:"
        cat release_notes.md

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: "Cursor & Windsurf Reset Tool ${{ github.ref_name }}"
        body_path: release_notes.md
        draft: false
        prerelease: false
        files: |
          release-files/*
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload release summary
      run: |
        echo "🎉 Release completed!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📦 Release Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Tag**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Release Time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔗 Links" >> $GITHUB_STEP_SUMMARY
        echo "- [View Release Page](https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Download Files](https://github.com/${{ github.repository }}/releases/latest)" >> $GITHUB_STEP_SUMMARY